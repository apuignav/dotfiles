# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

ZSH_AUTOSUGGEST_STRATEGY=match_prev_cmd
# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#


# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

#######################################################################
# ZSH
#######################################################################
export KEYTIMEOUT=1
# Use vim cli mode
bindkey '^P' up-history
bindkey '^N' down-history

# backspace and ^h working even after
# returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word
bindkey '^ ' forward-word
bindkey '^b' backward-word

# Save commands (https://sgeb.io/posts/2016/11/til-bash-zsh-half-typed-commands/)
bindkey '^q' push-line-or-edit

# Last minute binding
bindkey "^[[3~" delete-char

unsetopt SHARE_HISTORY
setopt HIST_IGNORE_SPACE
unsetopt AUTO_NAME_DIRS      # Auto add variable-stored paths to ~ list.
unsetopt COMPLETE_IN_WORD    # Complete from both ends of a word
unsetopt CLOBBER             # Don't overwrite existing files with > and >>
unsetopt PATH_DIRS           # Perform path search even on command names with slashes.
unsetopt FLOW_CONTROL        # Allow C-s and C-q to stop/start the terminal flow

setopt autopushd pushdsilent pushdtohome
# Remove duplicate entries
setopt pushdignoredups
# This reverts the +/- operators.
setopt pushdminus

# Report CPU usage for commands running longer than 20 seconds
zstyle ':zim:duration-info' threshold 20

# Improve vim tab completion 
zstyle ':completion:*:*:vim:*:*files' ignored-patterns '*.pdf'

#######################################################################
# Aliases
#######################################################################
function exists { which $1 &> /dev/null }
# Global aliases
if exists rg; then
    alias -g G=" | rg"
elif exists ag; then
    alias -g G=" | ag"
else
    alias -g G=" | grep"
fi
alias -g P=" | pyp"
alias -g C=" | peco"
alias -g NUL="> /dev/null 2>&1"
alias -g W=" | wc -l"
alias -g F=" | field "
# ZSH
alias mmv='noglob zmv -W'
# An extra ag
alias rg='rg --smart-case'
# General things
alias scpresume='rsync --partial --progress --rsh=ssh --archive'
alias grep='grep --color=auto'
# Pyp alias
alias pypr="pyp --rerun"
# Environment
#export LSCOLORS="gxfxcxdxbxegedabagacad"
# LHCb
export DLHCB=svn+ssh://svn.cern.ch/reps/lhcbdocs

# Load k.sh
# https://github.com/rimraf/k
if [[ -s "$HOME/dotfiles/zsh/k/k.sh" ]]; then
  source "$HOME/dotfiles/zsh/k/k.sh"
fi

# Platform-dependent aliases
[[ -f ~/.aliases ]] && source ~/.aliases

#######################################################################
# Setting autoloaded functions
#######################################################################
autoload zmv

my_zsh_fpath=${HOME}/dotfiles/zsh/autoloaded

fpath=($my_zsh_fpath $fpath)

if [[ -d "$my_zsh_fpath" ]]; then
    for func in $my_zsh_fpath/*; do
        autoload -Uz ${func:t}
    done
fi
unset my_zsh_fpath


if which peco &> /dev/null; then
  function peco_select_history() {
    local tac
    { which gtac &> /dev/null && tac="gtac" } || \
      { which tac &> /dev/null && tac="tac" } || \
      tac="tail -r"
    BUFFER=$(fc -l -n 1 | eval $tac | \
                peco --layout=top-down --query "$LBUFFER")
    CURSOR=$#BUFFER # move cursor
    zle -R -c       # refresh
  }

  zle -N peco_select_history
  bindkey '^R' peco_select_history
fi

function portforwarding() { 
    N=$((3000 + RANDOM % 10000))
    echo "Port forwording on $2:$3"
    echo "Listen on localhost:$1"

    noglob ssh -L *:${1}:localhost:${N} opsx-infra ssh -L ${N}:localhost:${3} -N ${2}
}

function dotenv() { 
    set -o allexport
    source .env 
    set +o allexport 
}

# Locales
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export C_CTYPE="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME=en"en_US.UTF-8"


#######################################################################
# Machine-dependent things
#######################################################################
# Load machine-dependent rc (if needed)
[[ -f ~/.localrc ]] && source ~/.localrc

#######################################################################
# Python
#######################################################################
[[ -f ~/.pythonrc ]] && export PYTHONSTARTUP=~/.pythonrc

source ~/dotfiles/zsh/gimbo.zsh
zstyle :zim:prompt theme powerlevel10k

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
