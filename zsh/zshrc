#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Vi mode (http://dougblack.io/words/zsh-vi-mode.html)
bindkey -v

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

#######################################################################
# ZSH
#######################################################################
export KEYTIMEOUT=1
# Use vim cli mode
bindkey '^P' up-history
bindkey '^N' down-history

# backspace and ^h working even after
# returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# Last minute binding
bindkey "^[[3~" delete-char

unsetopt SHARE_HISTORY
unsetopt AUTO_NAME_DIRS      # Auto add variable-stored paths to ~ list.
unsetopt COMPLETE_IN_WORD    # Complete from both ends of a word
unsetopt CLOBBER             # Don't overwrite existing files with > and >>
unsetopt PATH_DIRS           # Perform path search even on command names with slashes.
unsetopt FLOW_CONTROL        # Allow C-s and C-q to stop/start the terminal flow

setopt autopushd pushdsilent pushdtohome
# Remove duplicate entries
setopt pushdignoredups
# This reverts the +/- operators.
setopt pushdminus
# Overwrite prezto
for index ({1..9}) unalias "$index"
for index ({1..9}) alias "c$index"="cd -${index}"; unset index

# Report CPU usage for commands running longer than 20 seconds
REPORTTIME=20

# Improve vim tab completion 
zstyle ':completion:*:*:vim:*:*files' ignored-patterns '*.pdf'

#######################################################################
# Aliases
#######################################################################
function exists { which $1 &> /dev/null }
# Global aliases
if exists ag; then
    alias -g G=" | ag"
else
    alias -g G=" | grep"
fi
alias -g P=" | pyp"
alias -g C=" | percol"
alias -g NUL="> /dev/null 2>&1"
alias -g W=" | wc -l"
alias -g F=" | field "
# ZSH
alias mmv='noglob zmv -W'
# An extra ag
alias ag='ag -f --color-match="37;45"'
# General things
alias scpresume='rsync --partial --progress --rsh=ssh --archive'
alias grep='grep --color=auto'
alias cernProxy='ssh -D 8080 -Nf cern'
alias cernProxyDestroy='ps -ef | grep "ssh -D 8080" | grep -v grep | awk '"'"'{print $2}'"'"' | xargs kill'
alias root="root -l"
# Alias for git workflow
alias hsc='hack&&ship&&chop'
# Pyp alias
alias pypr="pyp --rerun"
# Environment
#export LSCOLORS="gxfxcxdxbxegedabagacad"
# LHCb
export DLHCB=svn+ssh://svn.cern.ch/reps/lhcbdocs
# Git
alias git-sync-fork="git fetch upstream; git checkout master; git merge upstream/master"
alias git-rebase-fork="git fetch upstream; git checkout master; git rebase upstream/master"

# Load k.sh
# https://github.com/rimraf/k
if [[ -s "$HOME/dotfiles/zsh/k/k.sh" ]]; then
  source "$HOME/dotfiles/zsh/k/k.sh"
fi


# Platform-dependent aliases
[[ -f ~/.aliases ]] && source ~/.aliases

#######################################################################
# Functions
#######################################################################
function mkc () {
    mkdir -p "$@" && cd "$@"
}

function sdu() {
    du -sk $@ | sort -nr | cut -f2 | sed -e "s/^/\"/g;s/$/\"/g" | xargs du -sh
}

function up() {
        if (( $# != 1 ))
        then
                cd ..
        else
                upstr="." 
                for i in {1..$1}
                do
                        upstr="$upstr/.." 
                done
                cd $upstr
        fi
}

function reducePdf() {
    filename=$(basename "$1")
    filename="${filename%.*}"
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$filename-compressed.pdf $filename.pdf
    mv -f $filename-compressed.pdf $filename.pdf
}

tbrowser () {
  # Check a file has been specified
  if (( $# == 0 )); then
    echo "No file(s) specified."
  else
    # For each file, check it exists
    for i; do
      if [ ! -f $i ]; then
        echo "Could not find file $i"
        return 1;
      fi
    done
    root -l $* $HOME/.scripts/new_browser.C
  fi
}

if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history
fi

# Git
function git-attic() {
    git log --raw --no-renames --date=short --format="%h %cd" "$@" |
    awk '/^[0-9a-f]/ { commit=$1; date=$2 } /^:/ && $5 == "D" { print date, commit "^:" $6 }' |
    git -p column
}

# Nice extraction function
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar vxjf $1       ;;
            *.tar.gz)         tar vxzf $1       ;;
            *.bz2)            bunzip2 $1        ;;
            # *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar vxf $1        ;;
            *.tbz2)           tar vxjf $1       ;;
            *.tgz)            tar vxzf $1       ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Fancy set tab title
function tab-title () {
    # Deactivate the prezto default
    # https://github.com/sorin-ionescu/prezto/blob/master/modules/terminal/init.zsh
    add-zsh-hook -d precmd _terminal-set-titles-with-path
    add-zsh-hook -d preexec _terminal-set-titles-with-command
    # Set the title
    set-tab-title "$@"
}

# Pandoc - LaTeX
function markdown2beamer () {
    filename=$1
    shift
    pandoc -t beamer -V theme:m -V themeopts:progressbar=frametitle,noframetitleoffset,block=fill --latex-engine xelatex --filter ~/.pandoc/filters/alert_filter.py "$@" -s "$filename" -o "`basename $filename .md`.pdf"
}

function markdown2beamersource () {
    filename=$1
    shift
    pandoc -t beamer -V theme:m -V themeopts:progressbar=frametitle,noframetitleoffset,block=fill --latex-engine xelatex --filter ~/.pandoc/filters/alert_filter.py "$@" -s "$filename" -o "`basename $filename .md`.tex"
}

#######################################################################
# Machine-dependent things
#######################################################################

# Load machine-dependent rc (if needed)
[[ -f ~/.localrc ]] && source ~/.localrc

#######################################################################
# Python
#######################################################################
[[ -f ~/.pythonrc ]] && export PYTHONSTARTUP=~/.pythonrc
