set nocompatible     " Disable vi-compatibility
set laststatus=2     " Always show the statusline
set encoding=utf-8   " Show unicode glyphs
set number           " Show line numbers
set esckeys          " Allow cursor keys in insert mode
set ttyfast          " Optimize for fast terminal connections
set gdefault         " Add the g flag to search/replace by default
set binary           " Don't add empty newlines at end of files
set noeol            " Don't add empty newlines at end of files
set background=dark  " Dark bg
set tabstop=2        " Make tabs as wide as two spaces
set hlsearch         " Highlight searches
set ignorecase       " Ignore case of searches
set smartcase        " Smart handling of case (http://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader)
set incsearch        " Highlight dynamically as pattern is typed
set gdefault         " Defaults replacing with g
set laststatus=2     " Always show status line
set mouse=v          " Enable mouse in all modes
set noerrorbells     " Disable error bells
set nostartofline    " Don’t reset cursor to start of line when moving around.
set ruler            " Show the cursor position
set shortmess=atI    " Don’t show the intro message when starting vim
set showmode         " Show the current mode
set title            " Show the filename in the window titlebar
set showcmd          " Show the (partial) command as it’s being typed
set cmdheight=2
syntax on            " Enable syntax highlighting
let mapleader=","    " Change the mapleader
"set textwidth=140     " Max textwidth
set backspace=2      " Set backspace work like in most other apps 

" Show invisible characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Better buffer management
map <silent> <leader>b :buffers<CR>:buffer<Space>

" Vundle!
source ~/.vim/bundles.vim

" Bind F2 to show "invisible" chars
nmap <silent> <F2> :set invlist<CR>:set list?<CR>
" Bind F3 to show line numbers
nmap <silent> <F3> :set invnumber<CR>:set number?<CR>
" Bind F4 to toggle Paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>
" Bind F5 to GUndo
noremap <F5> :GundoToggle<CR><CR>
" Bind F6 to TagbarToggle
noremap <F6> :TagbarToggle<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" select previously yanked line
nnoremap <leader>v V`]

" jj escapes
inoremap jj <ESC>

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=
" Open vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l
" Easy resize
if bufwinnr(1)
  map + <C-W>+
  map - <C-W>-
endif
map <c-m> <c-w><
map <c-x> <c-w>>

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
" (it will prompt for sudo password when writing)
cmap w!! %!sudo tee > /dev/null %

" Set CrtlP
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\.git$\|\.hg$\|\.svn$',
	\ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
	\ }
let g:ctrlp_map = '<c-f>'
let g:ctrlp_extensions = ['cmdline', 'yankring']

" Unicode powerline
let g:Powerline_symbols="unicode"

" remember previous position
set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"Set the badwolf colorsheme
colorscheme jellybeans

