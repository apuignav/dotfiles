"""
This file is executed when the Python interactive shell is started if
$PYTHONSTARTUP is in your environment and points to this file. It's just
regular Python commands, so do what you will. Your ~/.inputrc file can greatly
complement this file.

"""
try:
    get_ipython
except NameError:
    try:
        import readline
    except ImportError:
        print("This python lacks readline, so history and tab completion won't work.")
    else:
        import rlcompleter
        import os
        sysname = os.uname()[0]
        if sysname == 'Linux':
            readline.parse_and_bind("tab: complete")
        elif sysname == 'Darwin':
            # brew python:
            readline.parse_and_bind("tab: complete")
            # mac python:
            # readline.parse_and_bind("bind ^i rl_complete")
            # I think macos doesn't use gnu readline, but rather BSD libedit, which
            # acts like it but isn't quite the same. Brew uses actual gnu readline
            # when building python.
        del sysname

    # Restore our command-line history, and save it when Python exits.
    # Similar to how bash does it with .bash_history.
    if readline:
        import atexit
        import os.path
        history_path = os.path.expanduser('~/.python_history')
        if os.path.isfile(history_path):
            readline.read_history_file(history_path)
        atexit.register(lambda x=history_path: readline.write_history_file(x))
        del history_path

    # Enable Color Prompts
    import sys
    sys.ps1 = '\001\033[0;32m\002>>> \001\033[0m\002'
    sys.ps2 = '\001\033[0;32m\002... \001\033[0m\002'

    # Enable pretty printing
    import pprint
    def my_displayhook(value):
        if value is not None:
            try:
                import __builtin__
                __builtin__._ = value
            except ImportError:
                __builtins__._ = value
            pprint.pprint(value)
    sys.displayhook = my_displayhook
